# - Try to find Pleora SDK
#
#  Pleora_FOUND - system has pleora eUSB SDK
#  Pleora_INCLUDE_DIRS - the pleora eUSB SDK include directories
#  Pleora_LIBRARIES - link these to use pleora eUSB SDK
#  Pleora_BASE_DIR - set env varivales to this to use pleora eUSB SDK

set( PLEORA_BASE_SEARCH_PATH "/opt/pleora/ebus_sdk")

set( INCLUDE_SEARCH_PATHS
	"$ENV{ProgramFiles}/Pleora Technologies Inc/eBUS SDK/Includes"
)

set( LIBRARIES_SEARCH_PATHS
	"$ENV{ProgramFiles}/Pleora Technologies Inc/eBUS SDK/Libraries"
)

set( GENAPI_SEARCH_PATHS
   "$ENV{ProgramW6432}/GenICam_v2_4/library/CPP/lib/Win64_x64"
)

set(PLEORA_ITEMS  "include;lib;lib/genicam/bin/Linux")

foreach(ITEM_COUNTER ${PLEORA_ITEMS})
	foreach(BIT_COUNTER RANGE 32 64 32)
		foreach(DISTRO_COUNTER RANGE 12 20 2)
			if (BIT_COUNTER EQUAL 32)
				set(ARCH "i686")
			else()
				set(ARCH "x86_64")
			endif()
			#MESSAGE("${DISTRO_COUNTER} ${BIT_COUNTER} ---${ITEM_COUNTER}--- ${ARCH}")

			if (${ITEM_COUNTER} STREQUAL "include")
				SET (TMP_PATH "${PLEORA_BASE_SEARCH_PATH}/Ubuntu-${DISTRO_COUNTER}.04-${ARCH}/${ITEM_COUNTER}")
				#MESSAGE("${TMP_PATH}")
				list(APPEND INCLUDE_SEARCH_PATHS ${TMP_PATH})
			elseif (${ITEM_COUNTER} STREQUAL "lib")
				SET (TMP_PATH "${PLEORA_BASE_SEARCH_PATH}/Ubuntu-${DISTRO_COUNTER}.04-${ARCH}/${ITEM_COUNTER}")
				#MESSAGE("${TMP_PATH}")
				list(APPEND LIBRARIES_SEARCH_PATHS ${TMP_PATH})
			else()
				SET (TMP_PATH "${PLEORA_BASE_SEARCH_PATH}/Ubuntu-${DISTRO_COUNTER}.04-${ARCH}/${ITEM_COUNTER}_${BIT_COUNTER}_x${BIT_COUNTER}")
				#MESSAGE("${TMP_PATH}")
				list(APPEND GENAPI_SEARCH_PATHS ${TMP_PATH})
				SET (TMP_PATH "${PLEORA_BASE_SEARCH_PATH}/Ubuntu-${DISTRO_COUNTER}.04-${ARCH}/${ITEM_COUNTER}_${BIT_COUNTER}_ARM")
				#MESSAGE("${TMP_PATH}")
				list(APPEND GENAPI_SEARCH_PATHS ${TMP_PATH})
			endif()

		endforeach(DISTRO_COUNTER)
	endforeach(BIT_COUNTER)
endforeach(ITEM_COUNTER)

#MESSAGE("INCLUDE_SEARCH_PATHS: ${INCLUDE_SEARCH_PATHS}")
#MESSAGE("LIBRARIES_SEARCH_PATHS: ${LIBRARIES_SEARCH_PATHS}")
#MESSAGE("GENAPI_SEARCH_PATHS: ${GENAPI_SEARCH_PATHS}")

# Find header files
FIND_PATH(
  PVBASE_INCLUDE_DIR PvBase.h
  HINTS ${PC_PLEORA_DIR}/include
  PATHS ${INCLUDE_SEARCH_PATHS}
)
FIND_PATH(
  PVDEVICE_INCLUDE_DIR PvDevice.h
  HINTS ${PC_PLEORA_DIR}/include
  PATHS ${INCLUDE_SEARCH_PATHS}
)
FIND_PATH(
  PVBUFFER_INCLUDE_DIR PvBuffer.h
  HINTS ${PC_PLEORA_DIR}/include
  PATHS ${INCLUDE_SEARCH_PATHS}
)
FIND_PATH(
  PVGENICAM_INCLUDE_DIR PvGenICamLib.h
  HINTS ${PC_PLEORA_DIR}/include
  PATHS ${INCLUDE_SEARCH_PATHS}
)
FIND_PATH(
  PVSTREAM_INCLUDE_DIR PvStream.h
  HINTS ${PC_PLEORA_DIR}/include
  PATHS ${INCLUDE_SEARCH_PATHS}
)
FIND_PATH(
  PVTRANSMITTER_INCLUDE_DIR PvTransmitterLib.h
  HINTS ${PC_PLEORA_DIR}/include
  PATHS ${INCLUDE_SEARCH_PATHS}
)
FIND_PATH(
  PVVIRTUALDEVICE_INCLUDE_DIR PvVirtualDeviceLib.h
  HINTS ${PC_PLEORA_DIR}/include
  PATHS ${INCLUDE_SEARCH_PATHS}
)
FIND_PATH(
  PVSAMPLEUTILS_INCLUDE_DIR PvSampleUtils.h
  HINTS ${PC_PLEORA_DIR}/include
  PATHS ${INCLUDE_SEARCH_PATHS}
)

# Find Library files
FIND_LIBRARY(
  PVBASE_LIBRARY
  NAMES "PvBase${LIB_NAME_SUFFIX}"
  HINTS ${PC_PLEORA_DIR}/lib
  PATH ${LIBRARIES_SEARCH_PATHS}
)
FIND_LIBRARY(
  PVDEVICE_LIBRARY
  NAMES "PvDevice${LIB_NAME_SUFFIX}"
  HINTS ${PC_PLEORA_DIR}/lib
  PATH ${LIBRARIES_SEARCH_PATHS}
)

FIND_LIBRARY(
  PVBUFFER_LIBRARY
  NAMES "PvBuffer${LIB_NAME_SUFFIX}"
  HINTS ${PC_PLEORA_DIR}/lib
  PATH ${LIBRARIES_SEARCH_PATHS}
)
FIND_LIBRARY(
  PVGENICAM_LIBRARY
  NAMES "PvGenICam${LIB_NAME_SUFFIX}"
  HINTS ${PC_PLEORA_DIR}/lib
  PATH ${LIBRARIES_SEARCH_PATHS}
)
FIND_LIBRARY(
  PVSTREAM_LIBRARY
  NAMES "PvStream${LIB_NAME_SUFFIX}"
  HINTS ${PC_PLEORA_DIR}/lib
  PATH ${LIBRARIES_SEARCH_PATHS}
)
FIND_LIBRARY(
  PVTRANSMITTER_LIBRARY
  NAMES "PvTransmitter${LIB_NAME_SUFFIX}"
  HINTS ${PC_PLEORA_DIR}/lib
  PATH ${LIBRARIES_SEARCH_PATHS}
)
FIND_LIBRARY(
  PVVIRTUALDEVICE_LIBRARY
  NAMES "PvVirtualDevice${LIB_NAME_SUFFIX}"
  HINTS ${PC_PLEORA_DIR}/lib
  PATH ${LIBRARIES_SEARCH_PATHS}
)

#FIND_LIBRARY(
#  GENAPI_LIBRARY
#  NAMES GenApi_gcc40_v2_4 GenApi_gcc43_v2_4 GenApi_MD_VC80_v2_4
#  HINTS ${PC_GENAPI_LIBRARY_DIR}
#  PATH ${GENAPI_SEARCH_PATHS}
#)
#
#MESSAGE("PVBASE_INCLUDE_DIR ${PVBASE_INCLUDE_DIR}")
#MESSAGE("PVDEVICE_INCLUDE_DIR ${PVDEVICE_INCLUDE_DIR}")
#MESSAGE("PVBUFFER_INCLUDE_DIR ${PVBUFFER_INCLUDE_DIR}")
#MESSAGE("PVGENICAM_INCLUDE_DIR ${PVGENICAM_INCLUDE_DIR}")
#MESSAGE("PVSTREAM_INCLUDE_DIR ${PVSTREAM_INCLUDE_DIR}")
#MESSAGE("PVTRANSMITTER_INCLUDE_DIR ${PVTRANSMITTER_INCLUDE_DIR}")
#MESSAGE("PVVIRTUALDEVICE_INCLUDE_DIR ${PVVIRTUALDEVICE_INCLUDE_DIR}")
#MESSAGE("PVSAMPLEUTILS_INCLUDE_DIR ${PVSAMPLEUTILS_INCLUDE_DIR}")
#MESSAGE("PVBASE_LIBRARY ${PVBASE_LIBRARY}")
#MESSAGE("PVDEVICE_LIBRARY ${PVDEVICE_LIBRARY}")
#MESSAGE("PVBUFFER_LIBRARY ${PVBUFFER_LIBRARY}")
#MESSAGE("PVGENICAM_LIBRARY ${PVGENICAM_LIBRARY}")
#MESSAGE("PVSTREAM_LIBRARY ${PVSTREAM_LIBRARY}")
#MESSAGE("PVTRANSMITTER_LIBRARY ${PVTRANSMITTER_LIBRARY}")
#MESSAGE("PVVIRTUALDEVICE_LIBRARY ${PVVIRTUALDEVICE_LIBRARY}")
#MESSAGE("GENAPI_LIBRARY ${GENAPI_LIBRARY}")


IF(PVBASE_INCLUDE_DIR AND PVDEVICE_INCLUDE_DIR AND PVBUFFER_INCLUDE_DIR AND PVGENICAM_INCLUDE_DIR AND PVSTREAM_INCLUDE_DIR AND PVTRANSMITTER_INCLUDE_DIR AND PVVIRTUALDEVICE_INCLUDE_DIR AND PVSAMPLEUTILS_INCLUDE_DIR AND PVBASE_LIBRARY AND PVDEVICE_LIBRARY AND PVBUFFER_LIBRARY AND PVGENICAM_LIBRARY AND PVSTREAM_LIBRARY AND PVTRANSMITTER_LIBRARY AND PVVIRTUALDEVICE_LIBRARY)
# AND GENAPI_LIBRARY)
   SET(Pleora_FOUND TRUE)
   string(REGEX REPLACE "include$" "" Pleora_BASE_DIR ${PVBASE_INCLUDE_DIR})
   SET(Pleora_LIBRARIES ${PVBASE_LIBRARY} ${PVDEVICE_LIBRARY} ${PVBUFFER_LIBRARY} ${PVGENICAM_LIBRARY} ${PVSTREAM_LIBRARY} ${PVTRANSMITTER_LIBRARY} ${PVVIRTUALDEVICE_LIBRARY})
# ${GENAPI_LIBRARY})
   SET(Pleora_INCLUDE_DIRS ${PVBASE_INCLUDE_DIR} ${PVDEVICE_INCLUDE_DIR} ${PVBUFFER_INCLUDE_DIR} ${PVGENICAM_INCLUDE_DIR} ${PVSTREAM_INCLUDE_DIR} ${PVTRANSMITTER_INCLUDE_DIR} ${PVVIRTUALDEVICE_INCLUDE_DIR} ${PVSAMPLEUTILS_INCLUDE_DIR})
ENDIF()


IF (Pleora_FOUND)
   IF (NOT Pleora_FIND_QUIETLY)
      message(STATUS "Found Pleora: ${Pleora_LIBRARIES}")
   ENDIF (NOT Pleora_FIND_QUIETLY)
ELSE (Pleora_FOUND)
   IF (Pleora_FIND_REQUIRED)
      message(FATAL_ERROR "Could not find Pleora")
   ENDIF (Pleora_FIND_REQUIRED)
ENDIF (Pleora_FOUND)

